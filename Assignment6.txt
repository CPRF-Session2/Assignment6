1) Within this code, the programmer forgot to return 0. Furthermore, whether intentional or not, within the for loop, the programmer has stated that if the conditions are true, then each variable in array[n] = 0. If this was the intended result, then this was correct. Else, the programmer should have set the array to other values that they would deem useful.
2) A segmentation fault is a runtime error in which the code is trying to access memory that doesn't exist, or cannot be harnessed for that certain situation. For example, if someone were trying to print “int x”, and used the format specifier “%c”, the programmer would be greeted with a segmentation fault because they would be looking for a character value within an integer. Since the value is an integer, the character value does not exist and thus, the computer will try to access memory that has not been brought into being.
3) The difference between an enum and a struct is that an enum is a list that allows the programmer to create descriptive variables that simply represent numbers, and would only compile as numbers thanks to the functionality of the compiler. However, a struct, or structure allows a user to conglomerate a set of variables and pass them off as a single set. A struct can also be copied, although not all in one line of code. One major difference is that enums do not exist once the code is executed, while structs can appear at runtime based on what the programmer prefers.
4)Yes, you can include an enum within a struct. After declaring the struct, use the format enum (enumName) {variable=varvalue, ...} or typedef enum {variable = varvalue, ...} works as well.
